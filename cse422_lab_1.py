# -*- coding: utf-8 -*-
"""CSE422_LAB-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dZ1GR7GXeyxfVv3sRepgwAVcUjaOgZiu
"""

f=open('/content/drive/MyDrive/CSE422_Lab/lab-1/Input-1.txt',mode='r')
graph={}
h_value={}
for line in f:
  #print(line)
  x=line.split(' ')
  #print(x)
  city_name=x[0]
  h_val=int(x[1])
  h_value[city_name]=h_val
  graph[city_name]=[]

  for i in range(2,len(x)-1,2):
    graph[city_name].append([x[i],int(x[i+1])])
print(h_value)
print(graph)

s=input()  #Arad
des=input()  #Bucharest
cost={s:0}

def AstrSearch(h_value,graph,s,des):

  closed=[] #visited nodes
  for k,v in h_value.items():
    if k==s:
      opened= [[k,v]]

  while True:
    fn=[i[1] for i in opened] #f(n) vals=366,..
    chosen_index=fn.index(min(fn)) #idx of min f(n)
    node=opened[chosen_index][0] #opened[[int[0]]=node
    closed.append(opened[chosen_index])
    del opened[chosen_index]
    if closed[-1][0]==des:
      break
    for item in graph[node]: #item=['x',75],['y',118],..
      if item[0] in [closed_item[0] for closed_item in closed]: #item[0]='x','y',..
        continue
      cost.update({item[0]:cost[node]+item[1]}) #cost={s:0,..} => cost[node]=val
      fn_node=cost[node]+h_value[item[0]]+item[1] #h_value[x/y/..]
      temp=[item[0],fn_node]
      opened.append(temp)

  trace_node=des
  optimal_sequence=[des]
  for i in range(len(closed)-2,-1,-1): #starting from the prev node of des
    check_node=closed[i][0]
    if trace_node in [children[0] for children in graph[check_node]]: #for children in check_node:
                                                                        #list.append(childen[0]) => if trace_node in list:
      children_costs=[temp[1] for temp in graph[check_node]]
      children_node=[temp[0] for temp in graph[check_node]]

      if cost[check_node]+children_costs[children_node.index(trace_node)]==cost[trace_node]:
        optimal_sequence.append(check_node)
        trace_node=check_node
  optimal_sequence.reverse()

  return closed,optimal_sequence

a=AstrSearch(h_value,graph,s,des)

print(f'Path: {"-> ".join(a[1])}')
print(f'Total distance: {a[0][-1][1]}')
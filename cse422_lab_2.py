# -*- coding: utf-8 -*-
"""CSE422_LAB-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FPesLBQ-lhAezPrAHBetnz5P5Ud27ZGU
"""

import random

f=open('/content/drive/MyDrive/CSE422_Lab/lab-2/input1.txt',mode='r')
a=f.readline().split()
no_players=int(a[0])
target_run=int(a[1])
player_info=[]
all_players=[]

for i in range(no_players*2): #because of line breaks

  l2=f.readline().split()
  #print(l2)
  if len(l2)!=0:
    u=l2[0]
    all_players.append(u)
    v=int(l2[1])
    player_info.append((u,v))

#print(player_info)

options_size=20
max_iterations=1000

options = []   #nested list of potential selected players sequence => [[10110],[11001],..]
for i in range(options_size):
  single_option = []
  for j in range(no_players):
    one_player = random.choice([0, 1]) #randomly selecting players
    single_option.append(one_player)
  options.append(single_option)


def fitness(selected_players,target_run):
  t_runs=0
  #print(selected_players)
  for i in range(len(selected_players)):
    if selected_players[i]:
      t_runs += player_info[i][1] #total runs of the selected players
  if (t_runs) >= (target_run):
    fitness_val = t_runs - target_run
  else:
    fitness_val= -1

  return fitness_val

def crossover(first_parent, second_parent):
  crossover_idx = random.randint(1, len(first_parent) - 1) #1 to last index => randomly choosing an idx
  first_child = first_parent[:crossover_idx] + second_parent[crossover_idx:]  #1stparent till idx + 2ndparent from idx
  second_child = second_parent[:crossover_idx] + first_parent[crossover_idx:]
  return first_child, second_child

def mutate(selected_players):
  mutated_players = selected_players[:]
  idx = random.randint(0, len(mutated_players) - 1)
  mutated_players[idx] = not mutated_players[idx]  #changing the random idx
  return mutated_players

best_fitness = -1
best_solution = None

for k in range(max_iterations):
  for selected_players in options:
    fitness_val = fitness(selected_players, target_run)

    if fitness_val == 0:
      best_solution = selected_players
      break
    else:
      best_fitness = fitness_val
      best_solution = [-1]

  if best_fitness == 0:
    break
  first_parent = random.choice(options)
  second_parent = random.choice(options)
  first_child, second_child = crossover(first_parent,second_parent)

  if random.random() < 0.1: #10% chance of mutation
    first_child = mutate(first_child)
    second_child = mutate(second_child)

  options.extend([first_child,second_child])
print(all_players)
print("Binary String:", "".join(map(str, best_solution)))
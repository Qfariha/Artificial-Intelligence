# -*- coding: utf-8 -*-
"""CSE422_LAB-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uuQcvPj1wkbzcgTlVpuZs76yqnGwhaCG
"""

import random
import math

#arr=[66, 74, 14, 73, 19, 26, 32, 40]
# arr=[36, 26, 112, 57, 85, 80, 107, 28]
# target=93
# shuf=8

num="21381531" #21301531
shuf=int(num[3])
minimum=int(num[4])
target=int(num[len(num)-1]+num[len(num)-2])
maximum=int(target*(1.5))
arr=[]
for i in range(8):
  var=random.randint(minimum,maximum)
  arr.append(var)
print(f'Generated 8 random points between the minimum and maximum point limits: {arr}')
print(f'Total points to win: {target}')


maxi,mini=math.inf,-math.inf #starting value of alpha,beta

def alphaBeta(d,node_idx,maxNode,values,alpha,beta):
  if d==3:  #terminating condition
    return values[node_idx]
  if maxNode:
    best=mini
    for i in range(0, 2): #left and right children,i=0,1
      cur_val=alphaBeta(d+1, node_idx*2+i,False,values,alpha,beta) #left child=parent_idx*2, right_child=parent_id*2+1
      #print(cur_val)
      #print(best)
      best=max(best,cur_val) #node_max_val
      alpha=max(alpha, best)
      if alpha>=beta: #pruning condition
        break
    return best
  else:
    best=maxi
    for i in range(0, 2): #left and right children,i=0,1
      cur_val=alphaBeta(d+1, node_idx*2+i,True,values,alpha,beta) #d+1=next level,minNode to maxNode(True)
      best=min(best,cur_val) #node_max_val
      beta=min(beta, best)
      if alpha>=beta: #pruning condition
        break
    return best
ans=alphaBeta(0,0,True,arr,mini,maxi)
print(f'Achieved point by applying alpha-beta pruning: {ans}')
if ans<target:
  print('The Winner is Megatron')
else:
  print('The winner is Optimus Prime')
l=[]

for i in range(shuf):
  random.shuffle(arr) #does not return, shuffles the existing array
  a=alphaBeta(0,0,True,arr,mini,maxi)
  l.append(a)
c=0
for i in range(len(l)):
  if l[i]>target:
    c+=1
print()
print('After the shuffle:')
print(f'List of all points values from each shuffles: {l}')
print(f'The maximum value of all shuffles: {max(l)}')
print(f'Won {c} times out of {shuf} number of shuffles')